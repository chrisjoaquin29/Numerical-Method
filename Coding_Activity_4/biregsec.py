# -*- coding: utf-8 -*-
"""BiRegSec.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1i9moPFbZZLegoVxfARSlAnBck6PLoTFb

# Bisection Method
"""

import numpy as np
def bisec_n(func, iv1, iv2, nm_roots, epochs, tol):
    roots = []
    y1, y2 = func(iv1), func(iv2)
    end_bisect = 0
    if np.sign(y1) == np.sign(y2):
          print("Root cannot be found in the given interval")
    else:
          for bisect in range(epochs):
              midp = np.mean([iv1,iv2])
              y_mid = func(midp)
              y1 = func(iv1)
              if np.allclose(0, y1,tol):
                  roots.append(iv1)
                  end_bisect = bisect
                  if len(roots) == nm_roots: 
                    break
              if np.sign(y1) != np.sign(y_mid): #root is in first-half interval
                  iv2 = midp
              else: #root is in second-half interval
                  iv1 = midp 

    return print(" the roots are" ,roots, " found at" ,end_bisect)

def f(x): return 2*x**2 - 5*x + 3

bisec_n(f, iv1 = -1.5, iv2 = 1, nm_roots = 2 ,epochs = 50, tol= 1e-6)

bisec_n(f, iv1 = -10, iv2 = -1, nm_roots = 2 ,epochs = 50, tol= 1e-6)

"""## Regula Falsi """

###Function for Regula Falsi
def rfalsi(a,b): 
  m = (f(b)-f(a))/(b-a) ###Formula for regula falsi
  c = a - f(a)/m
  while abs(f(c))>0.01:
    if f(c)*f(a)>0:
      a=c
    else:
      b=c
    m = (f(b)-f(a))/(b-a)
    c = a - f(a)/m

    print(c,'', f(c))
  print('The root is',c)

"""# Secant Method"""

###Secant Method Function
import math
def secant(f,a,b,tol =1e-10,maxit=100):
  fa = f(a)
  if abs(fa) < tol:
    return a
  fb = f(b)
  if abs(fb) < tol: 
    return b

  if fa*fb > 0: 
    print("f(a) and f(b) must have different signs.")
    return none

  for _ in range(maxit):
    c = (a*fb - b*fa)/(fb - fa)
    fc = f(c)

    if abs(b - a) < tol:
      break
    if abs(fc) < tol:
      break
    if fa*fc > 0:
      a, fa = c, fc

    if fb*fc > 0:
      b, fb = c, fc
  return c